
DESCRIPTIONS
#include <iostream> 
* This line tells the compiler to include the iostream library, which is part of the C++ Standard Library. The iostream library provides functionality for input and output operations. This library defines objects such as cin, cout, cerr, and clog for handling input and 
* output in C++. In this program, cout is used to display the output to the console.
using namespace std; 
* This line tells the compiler to use the standard namespace (std). The std namespace contains the standard C++ library functions and objects, such as cout, cin, and string. By using namespace std; you avoid having to prefix the standard objects and functions with std:: each time (e.g., std::cout becomes just cout).
int main ()
* This line defines the main function, which is the entry point of the C++ program. Every C++ program starts execution from the main function. The int before main indicates that this function will return an integer value. The {begins the block of code for the main function.
{}
* The opening {begins the scope of the function (the body).
* The closing} ends the scope of the function. Once the closing brace is encountered, the function finishes execution.
* Any variables, functions, or statements declared inside the {} belong to that function's scope and cannot be accessed outside of it unless passed or returned explicitly.
std::
std::  is a namespace prefix that refers to the standard library (std stands for "standard"). The C++ Standard Library organizes its components within the std namespace to avoid naming conflicts with user-defined identifiers.
Why Use std::? 
1. Avoids Naming Conflicts: Ensures that standard library functions, classes, and objects are not accidentally redefined.
2. Organizes Code: Groups standard library features under a single namespace for better readability and structure.


cin >>
This line reads the user's input (their age) from the console and stores it in the age variable.
 *cin stands for "character input," and it is an object of the istream class, which is used to receive input from the user.
* The >> operator is called the "stream extraction operator," and it is used to extract (or "take") input from the input stream (in this case, the keyboard) and store it in a variable.

cout << 

* cout << is used to output data to the standard output stream (usually the console or terminal). It is part of the C++ Standard Library and is defined in the <iostream> header file
* cout stands for "character output," and it is an object of the ostream class, which is used to send output to the screen.
* The << operator is called the "stream insertion operator" and is used to send (or "insert") the data to the output stream.
return 0; 
*  This line indicates the end of the main function and returns the value 0 to the operating system. 
o return 0; tells the system that the program has executed successfully. In C++, returning 0 from the main function is a convention that indicates the program ran without errors.
o If a non-zero value were returned, it typically indicates an error or abnormal termination.
Operators Used:
1. Assignment Operator (=):
o The assignment operator = is used to assign values to variables.
o Example: int a = 10; assigns the value 10 to the variable a.
Explanation: This operator is used to initialize or update the value of a variable.
2. Arithmetic Operators: These operators perform arithmetic operations on numerical data:
o Addition (+): Adds two numbers together.
* Example: a + b results in 10 + 3 = 13.
* Usage: cout << "Sum: " << a + b << endl;
o Subtraction (-): Subtracts one number from another.
* Example: a - b results in 10 - 3 = 7.
* Usage: cout << "Difference: " << a - b << endl;
o Multiplication (*): Multiplies two numbers together.
* Example: a * b results in 10 * 3 = 30.
* Usage: cout << "Product: " << a * b << endl;
o Division (/): Divides one number by another (integer division in this case).
* Example: a / b results in 10 / 3 = 3 (note the integer division).
* Usage: cout << "Quotient: " << a / b << endl;
* Note: When performing division with integers, the result will also be an integer, discarding any remainder.
o Modulus (%): Calculates the remainder of the division of two numbers.
* Example: a % b results in 10 % 3 = 1 (since 10 divided by 3 gives a remainder of 1).
* Usage: cout << "Remainder: " << a % b << endl;
3. Stream Insertion Operator (<<):
o This operator is used to send data to the output stream, which in this case is the console (cout).
o Example: cout << "Sum: " << a + b << endl; outputs the string "Sum: " followed by the result of the expression a + b.
4. Endline (endl):
o The endl is used to insert a newline character and flush the output buffer.
o Usage: cout << "Sum: " << a + b << endl; moves the cursor to the next line after printing the output.


Data Types Used:
1. int (Integer):
o The int data type is used to store whole numbers (i.e., numbers without decimal points).
o Example: int a = 10, b = 3; stores the integer values 10 and 3 in the variables a and b.
o Range: On most systems, int can store values from approximately -2 billion to 2 billion (depending on system architecture).
2. cout (Console Output):
o cout is an output stream object used to display data on the screen. It is part of the iostream library.
o Usage: cout << "Sum: " << a + b << endl; sends data to the console to display.
Detailed Explanation of How These Work Together:
* Data Types: The program uses variables of type int to store whole numbers (a and b). These are used in arithmetic operations.
o a is initialized with 10.
o b is initialized with 3.
* Arithmetic Operations: The program performs several arithmetic operations (addition, subtraction, multiplication, division, and modulus) using the arithmetic operators (+, -, *, /, %), which operate on the int values stored in a and b.
o For example, a + b results in 13, a - b results in 7, and so on.
* Stream Insertion Operator (<<): The << operator is used to send output to the console. In this program, it's used to print the results of the operations, along with descriptive labels.
o For instance: cout << "Sum: " << a + b << endl; outputs the text "Sum: " followed by the result of a + b.
* endl: After each output, endl is used to print a new line, making the output more readable.
Example of How the Operators and Data Types Work Together:
int a = 10, b = 3;

cout << "Sum: " << a + b << endl;        
cout << "Difference: " << a - b << endl;   
cout << "Product: " << a * b << endl;       
cout << "Quotient: " << a / b << endl;      
cout << "Remainder: " << a % b << endl;   
